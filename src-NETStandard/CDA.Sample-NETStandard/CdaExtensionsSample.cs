/*
 * Copyright 2013 NEHTA
 *
 * Licensed under the NEHTA Open Source (Apache) License; you may not use this
 * file except in compliance with the License. A copy of the License is in the
 * 'license.txt' file, which should be provided with this work.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using Nehta.HL7.CDA;
using Nehta.VendorLibrary.Common;

namespace Nehta.VendorLibrary.CDA.SampleNETStandard
{
    public class CdaExtensionsSample
    {
        /// <summary>
        /// This example demonstrates how CDA XML can be manipulated programmatically as part of the CDA extensibility feature.
        /// This example shows the inclusion of an attachment in "Requested Service" section of an eReferral, which is not possible within the normal structure
        /// of the eReferral IG. This example demonstrates an additional ED element in an entry, which is then referenced by a custom narrative to render
        /// the attachment. 
        /// 
        /// The additional ED element can be referenced/rendered from a custom narrative through markup such as:
        /// <renderMultiMedia referencedObject="ID_OF_ATTACHMENT_ELEMENT">
        ///     <caption>Structured Body File</caption>
        /// </renderMultiMedia>
        /// </summary>
        public void AddingAnAttachmentSample()
        {
            // Load original document generated by CDA library
            var xmlDoc = new XmlDocument();
            xmlDoc.Load("CdaExtensionsSample\\CdaExtensions.xml");

            // Example attachment file
            var attachmentFileName = "CdaExtensionsSample\\attachmentFileName.pdf";

            // Create additional entry to describe ED data type containing attachment
            var entry = new POCD_MT000040Entry()
            {
                observationMedia = new POCD_MT000040ObservationMedia()
                {
                    ID = "ID_OF_ATTACHMENT_ELEMENT",
                    id = new[] { new II() { root = Guid.NewGuid().ToString() } },
                    classCode = ActClassObservation.OBS,
                    moodCode = ActMood.EVN,
                    value = new ED()
                    {
                        mediaType = "application/pdf",
                        integrityCheck = CalculateSHA1(File.ReadAllBytes(attachmentFileName)),
                        reference = new TEL()
                        {
                            value = attachmentFileName
                        }
                    }
                }
            };

            // Serialize data type to XML
            var entryXml = SerializeToXml(entry, "entry");

            // Find location in original CDA document to include extension element
            var nm = new XmlNamespaceManager(xmlDoc.NameTable);
            nm.AddNamespace("cda", "urn:hl7-org:v3");
            var positionToInsert = xmlDoc.SelectSingleNode(
                "cda:ClinicalDocument/cda:component[1]/cda:structuredBody[1]/cda:component[5]/cda:section[1]/cda:component[3]/cda:section[1]/cda:entry[1]",
                nm);

            // Import and include extension element into original CDA document
            var importedNode = xmlDoc.ImportNode(entryXml.DocumentElement, true);
            positionToInsert.ParentNode.InsertAfter(importedNode, positionToInsert);

            // Save extended CDA document
            xmlDoc.Save("CdaExtensionsSample\\CdaExtensionsOutput.xml");
        }

        /// <summary>
        /// Function to calculate the SHA1 hash of a file
        /// </summary>
        /// <param name="content">Byte contents of a file</param>
        /// <returns>SHA1 hash of the file</returns>
        private static byte[] CalculateSHA1(byte[] content)
        {
            var sha1CryptoServiceProvider = new SHA1CryptoServiceProvider();
            return sha1CryptoServiceProvider.ComputeHash(content);
        }

        /// <summary>
        /// Function to serialize an object into XML
        /// </summary>
        /// <param name="objectToSerialize">Object to serialize</param>
        /// <param name="documentElementName">Element name</param>
        /// <returns></returns>
        public static XmlDocument SerializeToXml(Object objectToSerialize, string documentElementName)
        {
            XmlTypeAttribute xta = Attribute.GetCustomAttribute(objectToSerialize.GetType(), typeof(XmlTypeAttribute)) as XmlTypeAttribute;

            XmlDocument output = new XmlDocument();
            output.PreserveWhitespace = true;

            XmlRootAttribute xmlRoot = new XmlRootAttribute(documentElementName);
            xmlRoot.Namespace = xta.Namespace;

            XmlSerializerNamespaces xsn = new XmlSerializerNamespaces();
            xsn.Add("", "urn:hl7-org:v3");

            StringBuilder sb = new StringBuilder();
            XmlWriter xmlw = XmlWriter.Create(sb);

            //XmlSerializer xmlSerializer = new XmlSerializer(objectToSerialize.GetType(), xmlRoot); -- Use new CachingXmlSerializerFactory class
            var xmlSerializer = CachingXmlSerializerFactory.Create(objectToSerialize.GetType(), xmlRoot);
            xmlSerializer.Serialize(xmlw, objectToSerialize, xsn);
            xmlw.Close();

            output.LoadXml(sb.ToString());

            return output;
        }
    }
}
